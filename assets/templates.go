// Code generated by go-bindata.
// sources:
// templates/index.tmpl
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\x4f\x8f\xdb\x2c\x10\xc6\xef\xf9\x14\xf3\x72\x77\xc8\xbe\x5b\x55\x6a\x85\x7d\xe9\xf6\xda\xad\xb4\xed\xa1\xc7\x09\x60\x83\x82\x01\x31\xe3\xa4\xf9\xf6\x95\xff\xa4\xc9\xa6\x89\x76\x4f\x20\xe6\x99\x67\xfc\xfc\x8c\xad\xfe\x7b\x7a\xfe\xf2\xe3\xd7\xf7\xaf\xe0\xb8\x0f\xcd\x4a\xcd\xcb\x4a\x39\x8b\xa6\x59\x01\x00\xa8\xe0\xe3\x0e\x8a\x0d\xb5\x20\x3e\x06\x4b\xce\x5a\x16\xe0\x8a\x6d\x6b\xe1\x98\x33\x7d\x96\x52\x9b\xb8\x4e\x91\xd6\x5d\xda\xaf\x87\x9d\x24\xff\x9b\xad\x8d\x24\x37\x1b\xfd\xe1\xff\x8f\x1b\xa9\x89\x64\x8f\x3e\xae\x35\x91\x68\x56\x4a\xce\xfe\x6a\x9b\xcc\x71\x1c\x67\xfc\x1e\x74\x40\xa2\x5a\x1c\x0a\xe6\x6c\x8b\x58\xa6\x5f\x54\xc6\x1e\x5b\xc0\x59\xdf\x39\xae\xaa\x4f\xa0\x53\xa8\x46\xf9\xa2\xbd\xd6\xeb\x14\x26\x49\x15\xba\x2a\x45\x5b\xb1\xf3\xc5\xcc\x27\xbd\x39\x9f\x5c\x74\x4f\x0e\xb8\x64\x93\x57\x85\xa9\xe8\xfb\xee\x64\x3f\xe6\xa9\x42\xea\x92\x00\x2a\xfa\xcc\xe2\x70\x38\x5c\xb2\x40\x22\xcb\x24\x7d\xdf\xc9\x14\x69\x6a\x58\xd3\xbe\x13\x80\x81\x6b\xf1\xdc\xb6\x5e\x5b\x68\x53\x81\x6f\xc8\x3e\x45\x0c\xf0\xc2\xc8\x9e\xd8\x6b\xba\x7e\x34\x89\x17\x49\xa5\xf1\xfb\x05\xd2\xbc\x3d\x2d\x17\x08\xb6\xa8\x77\x5d\x49\x43\x34\x55\x85\xc4\x05\xc3\x0d\xae\xaf\x89\xdf\x21\x79\x0d\xfa\x8e\xec\x86\x62\x52\xb9\x87\xe6\x09\x19\xa1\xf5\xc1\xc2\x90\x43\x42\xa3\xa4\x7b\xb8\xe1\x77\x8e\x75\xe7\xe8\x75\xda\x77\xde\x9d\xb7\xaf\xca\x75\xfc\x36\x95\x1e\x50\x8f\xef\xa4\x16\x02\x7a\xcb\x2e\x99\x5a\xe4\x44\x2c\xc0\x46\xcd\xc7\x6c\x6b\xd1\x0f\x81\x7d\xc6\xc2\x72\xd4\x57\x06\x19\x6f\x41\x72\x8f\xcd\x8b\x0d\x56\xf3\x0c\x80\xd3\x99\xc1\xe3\x0d\x79\x6e\x94\x8f\x79\x60\x98\x87\x8c\x3d\x02\x22\xf6\x7f\xf7\xde\x2c\xbb\x46\xc9\xfc\xb6\x01\x0d\xdb\xde\xb3\x80\x3d\x86\xc1\xd6\xe2\xe7\x34\xfb\xe4\xb8\x14\xff\x75\x52\x53\xa6\x77\xdc\xb8\x95\x92\xf3\x87\xac\xe4\xf4\xff\xf8\x13\x00\x00\xff\xff\xae\xc8\x64\xb3\x56\x04\x00\x00")

func templatesIndexTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTmpl,
		"templates/index.tmpl",
	)
}

func templatesIndexTmpl() (*asset, error) {
	bytes, err := templatesIndexTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tmpl", size: 1110, mode: os.FileMode(420), modTime: time.Unix(1482330583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tmpl": templatesIndexTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tmpl": &bintree{templatesIndexTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

